[gd_scene load_steps=7 format=3 uid="uid://bmcf5pe61drxq"]

[ext_resource type="PackedScene" uid="uid://ijyj2vmqstqj" path="res://scen/items/drone.tscn" id="1_piw0r"]

[sub_resource type="GDScript" id="GDScript_7wmy4"]
script/source = "extends RigidBody3D

enum State { IDLE, FLY }
var state: State = State.IDLE
var hp: int = 100
const SPEED: float = 0.05
const JUMP_VELOCITY: float = 3.5
var user_prefs: UserPref
var last_position: Vector3
var id_control: int = 0
@export var control_item_id: int
@export var damage = 99
var item_id = 3

#drone anim
@onready var prop1 = $drone/MeshInstance3D2
@onready var prop2 = $drone/MeshInstance3D3
@onready var prop3 = $drone/MeshInstance3D4
@onready var prop4 = $drone/MeshInstance3D5
@onready var camera_3_person = $Camera3person
@onready var camera_1_person = $Camera1person
@onready var ray_cast_3d = $RayCast3D
@onready var timer = $Timer
@onready var vfx_expp1 = preload(\"res://scen/vfx/vfx_expp1.tscn\")
var gravity: float = ProjectSettings.get_setting(\"physics/3d/default_gravity\")
var sensitivity: float
var tracked_touch_index: int = -1
var touch_start_position: Vector2
var current_rotation: Vector2
var dragging: bool = false
var value: float = 0
var controler_id:int = -1
var controler_id_nosync:int = -1
var global_t
@export var rotate_dir:Vector2
@export var input_dir:Vector2
@onready var debug_label = $\"debug label\"

# Добавляем переменную для хранения направления вращения камеры
var camera_rotation_direction: Vector3

func _ready():
	user_prefs = UserPref.load_or_create()
	_apply_user_prefs()
	Event.connect(\"charapter_op\", _apply_user_prefs)
	Event.connect(\"control\", apply_control_drone)
	Event.connect(\"cam_1_3p\",app_cam)
	Event.connect(\"reset_drone_pos\",reset_drone_pos)
	last_position = position
	camera_rotation_direction = Vector3(0, 0, 1) # Инициализируем направление камеры вперед
	global_t = global_transform
	control_item_id = Event.control_item_id + 1
	Event.control_item_id += 1
	camera_1_person.current = false
	camera_3_person.current = false
	#if Event.is_multiplayer == true:
		#debug_label.visible = true

func apply_control_drone(id,item_id,player_id):
	if id == control_item_id and controler_id == -1:
		controler_id = player_id
		camera_1_person.current = true
	else:
		if controler_id == player_id:
			controler_id = -1
		camera_1_person.current = false
		camera_3_person.current = false
	if Event.is_multiplayer == true: 
		if controler_id == player_id:
			id_control = id
		controler_id_nosync = controler_id
		sync.rpc(controler_id,id_control)
	else: id_control = id

@rpc(\"any_peer\", \"call_local\", \"reliable\")
func sync(c_id,id_c):
	controler_id = c_id
	id_control = id_c
	
func app_cam(cam,id):
	if control_item_id == id:
		if cam == true:
			camera_3_person.current = true
		else:
			camera_1_person.current = true
func _apply_user_prefs():
	sensitivity = user_prefs.sensitivity
	var index = user_prefs.MSAA
	if user_prefs.infinite_hp == true:
		hp = 10000000
	else: hp = 100
	match index:
		0: get_viewport().msaa_3d = Viewport.MSAA_DISABLED
		1: get_viewport().msaa_3d = Viewport.MSAA_2X
		2: get_viewport().msaa_3d = Viewport.MSAA_4X
		3: get_viewport().msaa_3d = Viewport.MSAA_8X
func reset_drone_pos():
	global_transform = global_t
func _process(delta: float):
	if position.distance_to(last_position) > 0.01:
		last_position = position
		_change_state(State.FLY)
	if control_item_id == Event.control_id:
		Event.drone_speed = \"m/c\" + str(round(linear_velocity))
	if ray_cast_3d.is_colliding() and timer.is_stopped():
		$Area3D2/CollisionShape3D.disabled = false
		await get_tree().create_timer(0.1).timeout
		var vfx_expp = vfx_expp1.instantiate()
		vfx_expp.position = ray_cast_3d.global_position
		get_tree().root.add_child(vfx_expp)
		if control_item_id == id_control:
			Event.emit_signal(\"control\",Event.player_control_id,-1,Event.mpp_index)
		get_parent().queue_free()
var impulse = Vector3()


@rpc(\"any_peer\", \"call_local\")
func movedata(r_dir,i_dir):
	position = r_dir
	rotation = i_dir
	#if controler_id_nosync == -1:
		#print(rotate_dir)

func _physics_process(delta: float):
	if control_item_id == id_control:
		if Event.is_multiplayer == true:
				if controler_id == Event.mpp_index:
					rotate_dir = Input.get_vector(\"left_drone_r\",\"right_drone_r\",\"downd2\",\"upd2\")
					input_dir = Input.get_vector(\"ui_left_d\", \"ui_right_d\", \"ui_up_d\", \"ui_down_d\")
					movedata.rpc(position,rotation)
				
		else: 
			rotate_dir = Input.get_vector(\"left_drone_r\",\"right_drone_r\",\"downd2\",\"upd2\")
			input_dir = Input.get_vector(\"ui_left_d\", \"ui_right_d\", \"ui_up_d\", \"ui_down_d\")
		value = (rotate_dir[1])*10
		var current_rotation_speed = 2
		if rotate_dir[1] > 0:
			current_rotation_speed = value * 5
			var forward = global_transform.basis.y
			forward = forward.normalized()
			apply_central_impulse(forward * value * SPEED)
		else:
			current_rotation_speed = lerp(current_rotation_speed, 0, 10 * delta)
		prop1.rotation.y += current_rotation_speed * delta
		prop2.rotation.y += current_rotation_speed * -delta
		prop3.rotation.y += current_rotation_speed * delta
		prop4.rotation.y += current_rotation_speed * -delta
		#if current_rotation.x != 0:
			#rotate_y(deg_to_rad(current_rotation.x * 10 * delta))
			#current_rotation.x = 0
		if input_dir:
			if input_dir.length() > 0.01:
				rotate_object_local(Vector3(1,0,0), deg_to_rad(input_dir[1] * sensitivity * delta * 150))
				rotate_object_local(Vector3(0,0,1), deg_to_rad(-input_dir[0] * sensitivity * delta * 150))
		if rotate_dir:
			if rotate_dir.length() > 0.01:
				rotate_y(deg_to_rad(-rotate_dir[0] * sensitivity * delta * 150))
	if controler_id == -1 and multiplayer.is_server():
		movedata.rpc(position,rotation)


func _change_state(new_state: State):
	state = new_state

#func _input(event: InputEvent):
	#if id_control == 1:
		#if event is InputEventScreenTouch:
			#if event.pressed:
				#if tracked_touch_index == -1:
					#tracked_touch_index = event.index
					#touch_start_position = event.position
					#dragging = true
			#elif event.index == tracked_touch_index:
				#tracked_touch_index = -1
				#dragging = false
	#if id_control == 1:
		#if event is InputEventScreenDrag and event.index == tracked_touch_index:
			#if dragging:
				## Пропускаем первый кадр, чтобы избежать резкого скачка
				#dragging = false
				#touch_start_position = event.position
			#else:
				#var delta = event.position - touch_start_position
				#delta *= -1
				#_rotate_camera(delta)
				#touch_start_position = event.position
#
	#if event is InputEventJoypadMotion:
		#_rotate_camera(Vector2(event.axis_value(0), event.axis_value(1)) * sensitivity)
#
#func _rotate_camera(delta: Vector2):
	#current_rotation += delta * sensitivity
	## Apply rotation to the RigidBody3D
	##apply_torque_impulse(Vector3(0,current_rotation.x,0))
	##current_rotation.x = 0
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_wnon2"]
radius = 0.051

[sub_resource type="GDScript" id="GDScript_qdu7h"]
resource_name = "push"
script/source = "extends Area3D

var  repulsion_force = 25
func _on_body_entered(body):
	print(body)
	if body is CharacterBody3D:
		# Вычисляем направление отталкивания от центра Area3D
		var direction = (body.global_transform.origin - self.global_transform.origin).normalized()
		
		# Вычисляем отталкивающую силу
		var force = direction * repulsion_force
		
		# Применяем силу к скорости CharacterBody3D
		body.velocity += force
	elif body is RigidBody3D:
		# Вычисляем направление отталкивания от центра Area3D
		var direction = (body.global_transform.origin - self.global_transform.origin).normalized()
		
		# Вычисляем отталкивающую силу
		var force = direction * repulsion_force
		
		# Применяем силу к RigidBody3D с использованием add_central_force
		body.apply_central_impulse(force)
"

[sub_resource type="SphereShape3D" id="SphereShape3D_af6m0"]
radius = 2.42169

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_m8eco"]
properties/0/path = NodePath("drone:control_item_id")
properties/0/spawn = true
properties/0/replication_mode = 1

[node name="exp_d" type="Node3D"]
transform = Transform3D(0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0, 0, 0)

[node name="drone" parent="." groups=["drone"] instance=ExtResource("1_piw0r")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.102848, 0, -0.0890975)
script = SubResource("GDScript_7wmy4")
damage = 99

[node name="RayCast3D" type="RayCast3D" parent="drone"]
transform = Transform3D(1, 0, 0, 0, -0.00221662, -0.999998, 0, 0.999998, -0.00221662, 0, 0, -0.48729)
collision_mask = 7

[node name="CSGMesh3D" type="CSGMesh3D" parent="drone/RayCast3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.00122619, -0.0226251, 5.00317e-05)
mesh = SubResource("CapsuleMesh_wnon2")

[node name="Timer" type="Timer" parent="drone"]
wait_time = 3.0
one_shot = true
autostart = true

[node name="Area3D2" type="Area3D" parent="drone" groups=["damage"]]
editor_description = "99"
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.102848, 0, 0.0890975)
collision_layer = 15
collision_mask = 15
script = SubResource("GDScript_qdu7h")

[node name="CollisionShape3D" type="CollisionShape3D" parent="drone/Area3D2"]
shape = SubResource("SphereShape3D_af6m0")
disabled = true

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_m8eco")

[connection signal="body_entered" from="drone/Area3D2" to="drone/Area3D2" method="_on_body_entered"]
